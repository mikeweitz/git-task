#!/bin/bash
#================
: <<'END'
Git-Task CLI : Add git-task commands to your shell

Save this file in a location that's part of your $PATH
ex on osX

Select a location - I use a bin folder in my home directory:
~/bin

make sure the it's executable
chmod +x ~/bin

make sure the folder is in your bash path. in ~/.bash_profile add:
PATH=$PATH:~/bin


Alternatively:
This project sprang from the pain of trying to enforce a code process 
that didn't line up with the objectives our tech team was trying 
to achieve.

If you find that to be the case, then I encourage you to design your 
own workflow for git.  

Think about how your team works, what challenges you face, and 
how can you use Git in a way that suspports your team.  


END
#========
_M="master"
_DEV="develop"
_STG="stg"
_QA="qa"
_PROD="prd"

_TASKPREFIX="task/"

((!$#)) && echo No parameter passed, command ignored! && exit 1


#Save current branch to variable
_BRANCH=$(git symbolic-ref HEAD)
_BRANCHNAME=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

if [[ $_BRANCH =~ $_TASKPREFIX ]]; then
	_ISTASK=true
else
	_ISTASK=false
fi

_start() {
	git checkout master
	git checkout -b task/$1
}

# Start a new task
if [ "$1" = "start" -o "$1" = "new" ]; then
	if [ -z "$2" ]; then
		echo "ERR: Specify a branch name for this task" && exit 1
	fi
	git checkout $_M
	git checkout -b task/$2
	exit 0
# Merge work into dev
elif [ "$1" = "dev" -o "$1" = "-d" ]; then
	_BRANCHNAME=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
	if [[ ! $_BRANCH =~ $_TASKPREFIX ]]; then
		echo "ERR: You must be on a task branch to run this command" && exit 1
	fi
	read -p "Merge '$_BRANCH' into $_DEV branch? (y/n) " -n 1 -r
	echo    # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo "Merging $_BRANCH into $_DEV branch..." 
		git checkout $_DEV
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_TASKPREFIX$_BRANCHNAME
		exit 0
	else
		echo "Exiting merge task"
	fi
# Merge work into qa and dev
elif [ "$1" = "qa" -o "$1" = "-q" ]; then
	_BRANCHNAME=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
	if [[ ! $_BRANCH =~ $_TASKPREFIX ]]; then
		echo "ERR: You must be on a task branch to run this command" && exit 1
	fi
	read -p "Merge '$_BRANCHNAME' into $_QA and $_DEV branches? (y/n) " -n 1 -r
	echo    # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo "Merging $_BRANCH into $_QA and all upstream branches..."
		git checkout $_QA
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_DEV
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_TASKPREFIX$_BRANCHNAME
		exit 0
	else 
		echo "Exiting merge task"
	fi
	echo "Merge '$_BRANCHNAME' into $_QA, and $_DEV branch"
	exit 0
# Merge work into stage, qa, and dev
elif [ "$1" = "stage" -o "$1" = "-s" ]; then
	_BRANCHNAME=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
	if [[ ! $_BRANCH =~ $_TASKPREFIX ]]; then
		echo "ERR: You must be on a task branch to run this command" && exit 1
	fi
	read -p "Merge '$_BRANCHNAME' into $_STAGE, $_QA, and $_DEV branches? (y/n) " -n 1 -r
	echo    # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo "Merging $_BRANCH into $_STAGE and all upstream branches..."
		git checkout $_STAGE
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_QA
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_DEV
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_TASKPREFIX$_BRANCHNAME
		exit 0
	else 
		echo "Exiting merge task"
	fi

# Merge work into master, stage, qa, and dev
elif [ "$1" = "finish" -o "$1" = "-f" ]; then
	_BRANCHNAME=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
	if [[ ! $_BRANCH =~ $_TASKPREFIX ]]; then
		echo "ERR: You must be on a task branch to run this command" && exit 1
	fi
	read -p "Merge '$_BRANCHNAME' into $_M, $_PRD, $_STAGE, $_QA, and $_DEV branches? (y/n) " -n 1 -r
	echo    # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo "Merging $_BRANCH into all $_M, $_PRD and all upstream branhces..."
		git checkout $_PRD
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_STAGE
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_QA
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_DEV
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_M
		git merge --no-ff $_TASKPREFIX$_BRANCHNAME
		git checkout $_TASKPREFIX$_BRANCHNAME
		exit 0
	else 
		echo "Exiting merge task"
	fi
	echo "Merge '$_BRANCH' into master, stage, qa, and dev branch" && exit 0

# Merge work into dev
elif [ "$1" = "help" -o "$1" = "-h" ]; then
	echo "Available Commands:"
	read -d '' help <<- EOF
	Command line utility functions for git-task

	usage: git task [command] [parameter]

	available commands:

	start [name]
	start new task branch called [name]

	dev
	merge current task branch into dev

	qa
	merge current task branch into qa and dev

	stage
	merge current task branch into stage, qa, and dev

	finish
	merge current task branch into master, stage, qa, and dev, then delete task branch

	home page: https://github.com/mikeweitz/git-task
	EOF
	echo "$help"
	exit 0

# Not a valid command
else
	echo "Command â€˜$1â€™ not found" && exit 1
fi